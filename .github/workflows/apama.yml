# This workflow installs Apama Community Edition and uses it to run PySys tests for your application

# Python 3 and Java JDK 8 are shipped with Apama (and added to PATH by this workflow) so there is no need to install them separately. 

# Using this workflow implies that you have agreed to the terms of the Software AG license agreement - see http://www.apamacommunity.com/terms-conditions/
# This workflow can be used without a commercial license of Apama. If you do have a commercial Apama license you hereby 
# agree not to commit the license file to any repository or location that can be accessed outside your organization. 

name: PySys

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    env:
      # Keep this updated with the latest version from http://www.apamacommunity.com/downloads/
      WORKFLOW_APAMA_VERSION: 10.5.3.2

    strategy:
      # Disable fail fast since it's useful to see test results for all platforms even if some failed
      fail-fast: false
      
      matrix:
        include:
          #- run-id: amd64_linux
          #  os: ubuntu-latest
          #  upload-docs: true
            
          - run-id: amd64_win
            os: windows-latest
            
    runs-on: ${{matrix.os}}
    
    steps:
      # Install the full Apama Community Edition. This contains useful tools such as apamadoc/apama_project 
      # which are not in the smaller "core" package

      - uses: actions/checkout@v2

      - name: Apama installation cache
        # This fork of actions/cache allows cache to be saved even if some later steps (e.g. testing) fail
        uses: pat-s/always-upload-cache@v2.0.0
        id: cache-apama-installer
        with:
            # Would prefer to put this in ~/ but doesn't work on Windows currently due to https://github.com/actions/cache/issues/456
            path: ${{ github.workspace }}/cached-apama-installation
            # To use a clean cache, add extra chars to this key
            key: apama-${{ matrix.run-id }}-${{ env.WORKFLOW_APAMA_VERSION }}-TODOx16

      - name: OTHER cache
        # This fork of actions/cache allows cache to be saved even if some later steps (e.g. testing) fail
        uses: pat-s/always-upload-cache@v2.1.3
        id: cache-apama-installer-foo
        with:
            # Would prefer to put this in ~/ but doesn't work on Windows currently due to https://github.com/actions/cache/issues/456
            path: ${{ github.workspace }}/cached-apama-installation.foo
            # To use a clean cache, add extra chars to this key
            key: apama-${{ matrix.run-id }}-${{ env.WORKFLOW_APAMA_VERSION }}-TODOy16

      - name: Download Apama
        uses: carlosperate/download-file-action@v1.0.3
        id: download-apama
        if: steps.cache-apama-installer.outputs.cache-hit != 'true'
        with:
           file-url: 'https://downloads.apamacommunity.com/apama/${{ env.WORKFLOW_APAMA_VERSION }}/apama_${{ env.WORKFLOW_APAMA_VERSION }}_${{ matrix.run-id }}.zip'
           file-name: apama-installer.zip
           location: ../apama-installer

      - name: Install Apama
        shell: bash
        run: |
          curl https://artifactcache.actions.githubusercontent.com/dM5dnPdeeeUq4Clbj1rjWwXnOIRnJvqTymQgifzV7kc5vCj9Dx/_apis/artifactcache/cache?keys=apama-amd64_win-10.5.3.2-TODOx16&version=7b46b213d263d648c84c7691482787c1d921fb2d30c534e245a34ff31a47f82e || echo failed curl0
          wget https://artifactcache.actions.githubusercontent.com/dM5dnPdeeeUq4Clbj1rjWwXnOIRnJvqTymQgifzV7kc5vCj9Dx/_apis/artifactcache/cache?keys=apama-amd64_win-10.5.3.2-TODOx16&version=7b46b213d263d648c84c7691482787c1d921fb2d30c534e245a34ff31a47f82e || echo failed wget0

          curl https://artifactcache.actions.githubusercontent.com/dM5dnPdeeeUq4Clbj1rjWwXnOIRnJvqTymQgifzV7kc5vCj9Dx/_apis/artifactcache/caches/101 || echo failed curl
          wget https://artifactcache.actions.githubusercontent.com/dM5dnPdeeeUq4Clbj1rjWwXnOIRnJvqTymQgifzV7kc5vCj9Dx/_apis/artifactcache/caches/101 || echo failed wget
          curl https://artifactcache.actions.githubusercontent.com/dM5dnPdeeeUq4Clbj1rjWwXnOIRnJvqTymQgifzV7kc5vCj9Dx/_apis/artifactcache/caches || echo failed curl2
          

          # TODO: remove this
          #touch `pwd`/cached-apama-installation.tar
          mkdir cached-apama-installation
        
          APAMA_CACHE_TAR=`pwd`/cached-apama-installation/cached-apama-installation-tar
          echo Cache location: $APAMA_CACHE_TAR

          if [[ ${{runner.os}} = Windows ]]; then
            _SAG_INSTALL_PATH=c:\\SoftwareAG
          else
            _SAG_INSTALL_PATH=/opt/softwareag
          fi
          
          if [[ "${{ steps.cache-apama-installer.outputs.cache-hit }}" = "true" ]]; then
            echo Unpacking Apama installation from cache
            
            mkdir $_SAG_INSTALL_PATH
            cd $_SAG_INSTALL_PATH
            tar -xf $APAMA_CACHE_TAR

            # Check it unpacked correctly
            ls $_SAG_INSTALL_PATH/Apama > /dev/null
          else
            # Cache miss - need to install it
            cd ../apama-installer
            unzip -q apama-installer.zip
            mv apama_*/* ./
            
            cat > apama-installer-script.txt << EOF
          LicenseAgree=Accept
          InstallProducts=e2ei/11/.latest/Apama/PAMServer
          PAM.Work.Directory.ID=__VERSION1__,$_SAG_INSTALL_PATH/apama-work
          InstallDir=$_SAG_INSTALL_PATH
          sagInstallerLogFile=softwareag-installer.log
          imageFile=data/SAGImage.zip
          EOF
            # Need to escape backslashes as it's effectively a properties file
            sed -i 's/\\/\\\\/g' apama-installer-script.txt
            
            echo Running installer with script:
            cat apama-installer-script.txt
            
            ./install -readScript apama-installer-script.txt -console -scriptErrorInteract no
            
            # Double-check that it was installed
            ls $_SAG_INSTALL_PATH/Apama/bin > /dev/null
            
            # Archive a pristine copy of the installation for the cache (before running any tests); 
            # no need to compress as the cache already does that
            cd $_SAG_INSTALL_PATH
            tar -cf $APAMA_CACHE_TAR *
            
            echo TODO - contents of ~ are:
            ls ~
            echo ---
          fi

          cd ~
          # Once installed, copy the entire apama environment into the GH Actions env so it can be used in any type of 
          # shell (bash/cmd/PS etc). We also set an extra env var APAMA_PYSYS so user can run pysys from any shell. 
          if [[ ${{runner.os}} = Windows ]]; then
            cmd.exe /c "$_SAG_INSTALL_PATH/Apama/bin/apama_env.bat && set > apama.env"
            echo "APAMA_PYSYS=pysys.cmd" >> $GITHUB_ENV
          else
            . $_SAG_INSTALL_PATH/Apama/bin/apama_env
            env | sort >> apama.env
            echo "APAMA_PYSYS=pysys" >> $GITHUB_ENV
          fi
          
          # Until Apama 10.7 we need to explicitly enable it (and disable colorama on windows which would replace the escape codes)
          echo PYSYS_COLOR=true >> $GITHUB_ENV
          echo PYSYS_DISABLE_COLORAMA=true >> $GITHUB_ENV
          
          cat apama.env >> $GITHUB_ENV

      - name: Install Windows 8.1 SDK
        if: matrix.run-id == 'amd64_win'
        shell: powershell
        run: |
          Invoke-WebRequest -Method Get -Uri https://go.microsoft.com/fwlink/p/?LinkId=323507 -OutFile sdksetup.exe -UseBasicParsing
          Get-Date
          Start-Process -Wait sdksetup.exe -ArgumentList "/q", "/norestart", "/features", "OptionId.WindowsDesktopSoftwareDevelopmentKit", "OptionId.NetFxSoftwareDevelopmentKit"
      - name: Setup Visual Studio
        if: matrix.run-id == 'amd64_win'
        uses: microsoft/setup-msbuild@v1.0.2
        with:
          vs-version: '[14,20)'

      - name: Build C++ plugins (Windows)
        shell: cmd
        if: matrix.run-id == 'amd64_win'
        run: |
          pushd %APAMA_HOME%\samples\correlator_plugin\cpp
          msbuild /p:platform=x64 correlator_plugin_cpp_api.sln

          mkdir %GITHUB_WORKSPACE%\src\lib
          echo Copying into Apama project dir:
          copy Release\*.dll %GITHUB_WORKSPACE%\src\lib
          copy Release\*.pdb %GITHUB_WORKSPACE%\src\lib
      - name: Build C++ plugins (Linux)
        shell: bash
        if: matrix.run-id != 'amd64_win'
        run: |
          cd $APAMA_HOME/samples/correlator_plugin/cpp
          make

          ls *.so
          mkdir --parents $GITHUB_WORKSPACE/src/lib
          cp lib*.so $GITHUB_WORKSPACE/src/lib/

      - name: Build Java plugins
        shell: bash
        run: |
          cd $APAMA_HOME/samples/correlator_plugin/java
          ant
          mkdir --parents $GITHUB_WORKSPACE/src/lib
          cp *.jar $GITHUB_WORKSPACE/src/lib/

      - name: Deploy Apama project
        shell: bash
        run: |
          engine_deploy --outputDeployDir __deploydir src
          ls __deploydir

      - name: PySys tests
        working-directory: test
        shell: bash
        id: pysys
        run: |
          ls ..
          $APAMA_PYSYS run --threads=auto --record --purge --printLogs=ALL -Xeplcoverage -XcodeCoverage --mode=ALL --outdir=`pwd`/__pysys_output/${{matrix.run-id}} 

      # If any tests fail, PySys will return an error code, so we need "if: always()" so the following steps will run
      # Since we expect failures only from the cookbook sample, that's the one we upload artifacts for (using id=pysys)
      # The follow lines are a copy from the sample pysys workflow

      - name: Upload archive artifacts for any test failures
        uses: actions/upload-artifact@v2
        if: failure()

        with:
          name: pysys_output_${{matrix.run-id}}
          path: test/__pysys_output/${{matrix.run-id}}

      - name: Upload EPL code coverage report
        uses: actions/upload-artifact@v2
        if: success()

        with:
          name: pysys_epl_coverage_${{matrix.run-id}}
          path: test/__pysys_output/${{matrix.run-id}}/eplcoverage

      - name: Build ApamaDoc
        shell: bash
        if: always()
        run: |
          mkdir --parents __build/apamadoc
          apamadoc __build/apamadoc $APAMA_HOME/samples/epl/simple
     
      - name: Upload ApamaDoc to gh-pages
        if: matrix.upload-docs
        #if: github.event_name == 'release'
        uses: JamesIves/github-pages-deploy-action@3.6.2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH: gh-pages
          FOLDER: __build/apamadoc
