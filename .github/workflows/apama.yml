# This workflow installs Apama Community Edition and uses it to run PySys tests for your application

# Using this workflow implies that you have agreed to the terms of the Software AG license agreement - see http://www.apamacommunity.com/terms-conditions/

name: PySys

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    env:
      # Keep this updated with the latest version from http://www.apamacommunity.com/downloads/
      WORKFLOW_APAMA_VERSION: 10.5.3.3 

    strategy:
      # Disable fail fast since it's useful to see test results for all platforms even if some failed
      fail-fast: false
      
      matrix:
        include:
          - run-id: amd64_linux
            os: ubuntu-latest
            
          #- run-id: amd64_win
          #  os: windows-latest
            
    runs-on: ${{matrix.os}}
    
    steps:
      # Install the desired version of Apama Community Edition
      - name: Cache Apama installer
        uses: actions/cache@v2
        with:
            path: ${{env.HOME}}/apama-installer
            key: apamainstaller-${{ matrix.run-id }}-${{ env.WORKFLOW_APAMA_VERSION }}

      - name: Download and install Apama
        shell: bash
        run: |
          echo Checking: $HOME/apama-installer/apama.zip and ${{ env.HOME }} and ${{ env.WORKFLOW_APAMA_VERSION }}  and ${{ env }} and ${{ matrix.run-id }}
          if [[ ! -f $HOME/apama-installer/apama.zip ]]; then
            echo Downloading Apama community edition
            mkdir --parents $HOME/apama-installer
            wget --no-verbose -O $HOME/apama-installer/apama.zip https://downloads.apamacommunity.com/apama/${WORKFLOW_APAMA_VERSION}/apama_${WORKFLOW_APAMA_VERSION}_${{ matrix.run-id }}.zip
            cd $HOME/apama-installer
            unzip -q apama.zip
            mv apama-* ./
          fi
          
          cat > $HOME/apama-installer-script.txt << EOF
          LicenseAgree=Accept
          AcceptInnovationRelease=yes
          InstallProducts=e2ei/11/.latest/Apama/PAMServer
          PAM.Work.Directory.ID=__VERSION1__,$HOME/apama-work
          InstallDir=$HOME/softwareag
          PAM.Product.Name.ID=0
          HostName=`hostname`
          sagInstallerLogFile=$HOME/softwareag-installer.log
          EOF
          
          echo Wrote script:
          cat $HOME/apama-installer-script.txt
          
          #$HOME/apama-installer/install -readScript $HOME/apama-installer-script.txt
          #ls $HOME/softwareag
         
      - uses: actions/checkout@v2

      #- name: wget
      #  uses: wei/wget@v1
      #  with:
      #    args: -O ${{env.HOME}}/apama-installer/apama.zip https://downloads.apamacommunity.com/apama/${{ env.WORKFLOW_APAMA_VERSION }}/apama_${{ env.WORKFLOW_APAMA_VERSION }}_${{ matrix.run-id }}.zip

      #- uses: actions/setup-python@v2
      #  with:
      #    python-version: 3.8
      #- name: Install Python dependencies
      #  run: |
      #    python -m pip install --upgrade pip

      - name: PySys tests
        working-directory: test
        shell: bash
        id: pysys
        run: |
          #. $HOME/softwareag/Apama/apama_env
          #pysys.py run --ci --outdir=${{matrix.run-id}}

      #- name: Upload code coverage
      #  uses: codecov/codecov-action@v1
      #  if: steps.pysys.outputs.artifact_EPLCoverageDir
      #  with:
      #    file: ${{ steps.pysys.outputs.artifact_EPLCoverageDir }}/epl_coverage.xml
        
      # If any tests fail, PySys will return an error code, so we need "if: always()" so the following steps will run
      # Since we expect failures only from the cookbook sample, that's the one we upload artifacts for (using id=pysys)
      # The follow lines are a copy from the sample pysys workflow

      - name: Upload performance CSV artifacts
        uses: actions/upload-artifact@v2
        # Only do this if some performance results were generated
        if: always() && steps.pysys.outputs.artifact_CSVPerformanceReport

        with:
          name: pysys_performance_${{matrix.test-run-id}}
          path: ${{ steps.pysys.outputs.artifact_CSVPerformanceReport }}

      - name: Upload archive artifacts for any test failures
        uses: actions/upload-artifact@v2
        if: always() && steps.pysys.outputs.artifact_TestOutputArchiveDir

        with:
          name: pysys_output_${{matrix.test-run-id}}
          path: ${{ steps.pysys.outputs.artifact_TestOutputArchiveDir }}
