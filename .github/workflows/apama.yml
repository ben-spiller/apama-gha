# This workflow installs Apama Community Edition and uses it to run PySys tests for your application

# Using this workflow implies that you have agreed to the terms of the Software AG license agreement - see http://www.apamacommunity.com/terms-conditions/
# You also agree that you will not commit any Apama license file you may have to a public repository. 

name: PySys

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    env:
      # Keep this updated with the latest version from http://www.apamacommunity.com/downloads/
      WORKFLOW_APAMA_VERSION: 10.5.3.2

    strategy:
      # Disable fail fast since it's useful to see test results for all platforms even if some failed
      fail-fast: false
      
      matrix:
        include:
          - run-id: amd64_linux
            os: ubuntu-latest
            release-docs: true
            
          #- run-id: amd64_win
          #  os: windows-latest
            
    runs-on: ${{matrix.os}}
    
    steps:
      # Install the full Apama Community Edition. This contains useful tools such as apamadoc/apama_project 
      # which are not in the smaller "core" package
      - name: Get Apama installation from cache
        uses: actions/cache@v2.1.3
        id: cache-apama-installer
        with:
            path: ~/cached-apama-installation.zip
            key: apama-installation-${{ matrix.run-id }}-${{ env.WORKFLOW_APAMA_VERSION }}-xxxx

      - name: Download Apama
        uses: carlosperate/download-file-action@v1.0.3
        id: download-apama
        if: steps.cache-apama-installer.outputs.cache-hit != 'true'
        with:
           file-url: 'https://downloads.apamacommunity.com/apama/${{ env.WORKFLOW_APAMA_VERSION }}/apama_${{ env.WORKFLOW_APAMA_VERSION }}_${{ matrix.run-id }}.zip'
           file-name: apama-installer.zip
           location: /tmp/apama-installer

      - name: Install Apama
        shell: bash
        if: steps.cache-apama-installer.outputs.cache-hit != 'true'
        run: |
          cd /tmp/apama-installer
          unzip -q ${{ steps.download-apama.outputs.file-path }}
          mv apama_*/* ./
          
          if [[ ${{runner.os}} = Windows ]]; then
            _SAG_INSTALL_PATH=c:\\SoftwareAG
          else
            _SAG_INSTALL_PATH=/opt/softwareag
          fi
          # Make this available to later steps
          echo "_SAG_INSTALL_PATH=$_SAG_INSTALL_PATH" >> $GITHUB_ENV
          
          cat > apama-installer-script.txt << EOF
          LicenseAgree=Accept
          InstallProducts=e2ei/11/.latest/Apama/PAMServer
          PAM.Work.Directory.ID=__VERSION1__,$_SAG_INSTALL_PATH/apama-work
          InstallDir=$_SAG_INSTALL_PATH
          sagInstallerLogFile=softwareag-installer.log
          imageFile=data/SAGImage.zip
          EOF
          
          echo Running installer with script:
          cat apama-installer-script.txt
          
          ./install -readScript apama-installer-script.txt -console -scriptErrorInteract no
          
          # Double-check that it was installed
          ls $_SAG_INSTALL_PATH/Apama/bin > /dev/null
          
          # Archive a pristine copy of the installation for the cache
          cd $_SAG_INSTALL_PATH
          zip -rq ~/cached-apama-installation.zip *
          
      - name: Unpack cached Apama installation
        shell: bash
        if: steps.cache-apama-installer.outputs.cache-hit == 'true'
        run: |
          if [[ ${{runner.os}} = Windows ]]; then
            _SAG_INSTALL_PATH=c:\\SoftwareAG
          fi
          else
            _SAG_INSTALL_PATH=/opt/softwareag
          fi
          # Make this available to later steps
          echo "_SAG_INSTALL_PATH=$SAG_INSTALL_PATH" >> $GITHUB_ENV
          
          mkdir $_SAG_INSTALL_PATH
          cd $_SAG_INSTALL_PATH
          unzip -q ~/apama-installation.zip
          
          ls $_SAG_INSTALL_PATH/Apama > /dev/null

      - name: Setup Apama environment
        shell: bash
        run: |
          echo _SAG_INSTALL_PATH = $_SAG_INSTALL_PATH
          ls $_SAG_INSTALL_PATH
          # Once installed, copy the most important env vars into the workflow's env for later steps
          # This allows running processes such as Python and pip directly
          #if [[ ${{runner.os}} = Windows ]]; then
          #  cmd /c $SAG_INSTALL_PATH/Apama/bin/apama_env.bat
          #else
          #  . $_SAG_INSTALL_PATH/Apama/bin/apama_env
          #fi
          
          #echo "APAMA_HOME=$APAMA_HOME" >> $GITHUB_ENV
          #echo "$PATH" >> $GITHUB_PATH
          #echo "$LD_LIBRARY_PATH" >> $GITHUB_PATH

      - uses: actions/checkout@v2

      - name: LOGIT
        shell: bash
        run: |
          echo GH path:
          cat $GITHUB_ENV
          echo GH env:
          cat $GITHUB_PATH

      - name: Build project
        shell: bash
        run: |
          echo TODO
          # . $APAMA_HOME/bin/apama_env
          #ant

      - name: PySys tests
        working-directory: test
        shell: bash
        id: pysys
        run: |
          #. $APAMA_HOME/bin/apama_env
          # TODO: add ci option, remove absolute path and modernize code coverage approach once we're on 10.7
          #pysys.py run --outdir=`pwd`/${{matrix.run-id}} -Xeplcoverage --threads=auto

      #- name: Upload code coverage
      #  uses: codecov/codecov-action@v1
      #  if: steps.pysys.outputs.artifact_EPLCoverageDir
      #  with:
      #    file: ${{ steps.pysys.outputs.artifact_EPLCoverageDir }}/epl_coverage.xml
        
      # If any tests fail, PySys will return an error code, so we need "if: always()" so the following steps will run
      # Since we expect failures only from the cookbook sample, that's the one we upload artifacts for (using id=pysys)
      # The follow lines are a copy from the sample pysys workflow

      #- name: Upload performance CSV artifacts
      #  uses: actions/upload-artifact@v2
      #  # Only do this if some performance results were generated
      #  if: always() && steps.pysys.outputs.artifact_CSVPerformanceReport

      #  with:
      #    name: pysys_performance_${{matrix.test-run-id}}
      #    path: ${{ steps.pysys.outputs.artifact_CSVPerformanceReport }}

      # TODO: could also upload epl code coverage (in 10.7.1 this will be easier due to epl_coverage.xml) 
      
      - name: Upload archive artifacts for any test failures
        uses: actions/upload-artifact@v2
        if: failure()

        with:
          name: pysys_output_${{matrix.run-id}}
          path: test/__pysys_output/${{matrix.run-id}}

      - name: Build apamadoc
        shell: bash
        run: |
          #. $APAMA_HOME/bin/apama_env
          mkdir --parents __build/apamadoc
          #apamadoc __build/apamadoc $APAMA_HOME/samples/epl/simple
      - name: Upload apamadoc to gh-pages
        if: ${{matrix.release-docs}}
        #if: github.event_name == 'release'
        uses: JamesIves/github-pages-deploy-action@3.6.2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH: gh-pages
          FOLDER: __build/apamadoc
